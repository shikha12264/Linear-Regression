# Shikha Singh

### Task 1 - Predict the percentage of an student based on the no. of study hours.

## Importing Libraries

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from matplotlib import style
from sklearn.linear_model import LinearRegression
from sklearn import metrics
from sklearn.model_selection import train_test_split 
%matplotlib inline

## Importing the data

sh_url = 'https://raw.githubusercontent.com/AdiPersonalWorks/Random/master/student_scores%20-%20student_scores.csv'
try:
  vs = pd.read_csv(sh_url)
except :
  print("This file cant be read")

## Data Visualization 

print(vs.head(10))

## Plotting the data

vs.plot(x='Hours' , y='Scores',kind='scatter')
plt.title('Hours vs Scores')
plt.xlabel('Hours')
plt.ylabel('Scores')
plt.show()

#### From the above graph, we see that there is a collinearity between scores and hours i.e. as hours increases ,scores also tend to increase positively.

## Preparing Data

#x [independent variable]
X=[]
for i in vs['Hours']:
  X.append([i])
print(X)


#y [dependent variable]
y=[]
for i in vs['Scores']:
  y.append([i])
print(y)

## Splitting data into training and testing sets

from sklearn.model_selection import train_test_split  
X_train, X_test, y_train, y_test = train_test_split(X, y, 
                            test_size=0.3, random_state=0)
print(X_train)


## Training Algorithm  
Now we have training set data to train our model

from sklearn.linear_model import LinearRegression  
regressor = LinearRegression()  
regressor.fit(X_train, y_train) 

print("Training complete.")


## Plotting the regression line

line = regressor.coef_*X+regressor.intercept_  # bf_line = m(x) +c
plt.scatter(X, y)
plt.plot(X, line)
plt.show()


## Predictions 
by providing x_test to our algorithm we retrieve y_pred and we compare it to the actual corressponding value of y_test

print(X_test)
y_pred = regressor.predict(X_test)

## Comparing   
y_test and y_pred values

Y_test=[]
Y_pred=[]
for i in y_test:
  Y_test.append(sum(i))
for i in y_pred:
  Y_pred.append(sum(i))
df2 = pd.DataFrame({'Actual': Y_test, 'Predicted': Y_pred})  
print(df2 )


## Provided prediction testcase
Predict the percentage of an student based on the no. of study hours.

hours = [[9.25]]
own_pred = regressor.predict(hours)
print("No of Hours = {}".format(hours[0][0]))
print("Predicted Score = {}".format(own_pred[0][0]))

## Evaluating Model

from sklearn import metrics  
print('Mean Absolute Error:', 
      metrics.mean_absolute_error(Y_test, Y_pred)) 
